in terminal to import a json file to a databse and a collections

$ mongoimport --db <database_name> --collection <collection_name> --jsonArray --file dataFile.json
$ mongoimport --db learning_mongo --collection tours --file data/tours_r.json --jsonArray
$ mongoimport --db learning_mongo --collection tours --file data/tours.json --jsonArray
$ mongoimport --collection  people --db learning_mongo --jsonArray --file data/people.json
$ mongoimport --collection  movies --db learning_mongo --jsonArray --file data/movies.json

// inside mongo shell

> db    // show the selected database

> show dbs    // show all the available databases in the server

> use <database_name>   // switch to the <database_name>

> show collections   // show all the collections available in mongo

basic operations with CRUD

// To insert a data, here is an example
> db.tours.insert({"tourName":"The Wines of Santa Cruz","tourLength":3,"tourDescription":"Discover Santa Cruz's wineries","tourPrice":500,"tourTags":["Wine", "Santa Cruz"]})

// to update or insert on field into a specified data, example:
> db.tours.update({"tourName" : "The Wines of Santa Cruz"}, {$set: {"tourRegion":"Central Coast"}})
// This only insert a parameter called tourRegion to the data we've just inserted.

// to add more data to an array, with this example
> db.tours.update({"tourName":"The Wines of Santa Cruz"}, {$addToSet: {"tourTags":"boardWalk"}})

// to remove a data from a collection
> db.tours.remove({"tourName":"The Wines of Santa Cruz"})

// Bring back all the data in the collection 
> db.tours.find()

// to read the data with tourTags as wine
> db.tours.find({"tourTags":"wine"})

// using projections to bring back only the needed data
// For instance, bring only the 'tourName' of each tour (This include the _id)
> db.tours.find({},{tourName:1})
// To exclude the _id
> db.tours.find({},{tourName:1,_id:0})
// Let's bring more information (Hard to read)
> db.tours.find({},{tourName:1, tourPrice:1, tourLength:1, _id:0})
// the previous command but with pretty
> db.tours.find({},{tourName:1, tourPrice:1, tourLength:1, _id:0}).pretty()
// sorting in desceding touPrice the previous command
> db.tours.find({},{tourName:1, tourPrice:1, tourLength:1, _id:0}).pretty().sort({tourPrice:-1})
// limit operator
> db.tours.find({},{tourName:1, tourPrice:1, tourLength:1, _id:0}).pretty().sort({tourPrice:-1}).limit(1)
// working with pages you can skip the first items of the query
> db.tours.find({},{tourName:1, tourPrice:1, tourLength:1, _id:0}).pretty().sort({tourPrice:-1}).limit(1).skip(20)

//when you have an array for example of tags you can match the result
// tourTags: is an array of tags
> db.tours.find({"tourTags":"boating"})

// with operators $lte: less than or equal, $gte: greater than or equal
> db.tours.find({tourPrice:{$lte:1000,$gte:800}}).pretty()

// To create an Single Key Index
> db.tour.createIndex({tourPackage:1})

// to drop a collection
> db.tour.drop()

// remove all the items in a collection
> db.tours.remove({})

// search on multiple key 
// $lte: less than or equal operator
> db.tours.find({"tourPrice":{$lte:500}, "tourLength":{$lte:3}})


// with this at the end of the query you will get some stats about the query
> ... .explain()
// adding a "executionStats" insede explain you can get more information about your query
> ... .explain("executionStats")

// Creating a compound indexes
> db.tours.createIndex({tourPrice:1, tourLength:1})

// creating a unique field
> db.tours.createIndex({"tourName":1},{unique:true})

// creating text indexes
> db.tours.createIndex({tourDescription:"text", tourBlurb:"text"})
// and searching on the text
> db.tours.find({$text:{$search:"wine"}}).pretty()
// relevance score use by the Mongo Engine. get the best document
// it can be higher if it found more words related with the search
> db.tours.find({$text:{$search:"wine"}}, {score:{$meta:"textScore"}, tourName:1, _id:0}).pretty().sort({score:{$meta:"textScore"}})

// using regular expressions
> db.tours.find({tourDescription:{$regex:/backpack/i}},{tourName:1, _id:0}).pretty()
// regex shorthand
> db.tours.find({tourDescription:/backpack/i},{tourName:1, _id:0}).pretty()


// =================================================
//Working with movies and people collections
> db.people.findOne({_id:'Brad Pitt'})
> db.movies.findOne({_id:"Fight Club"})

> db.people.find({movies:"The Avengers"}).pretty()

// Modelling the schema (adding cast to the movie object)
> var moviename="The Avengers"
> var movieObj=db.movies.findOne({_id:moviename})
> movieObj.cast = []
> var personArray = db.people.find({movies:moviename})
> personArray.forEach((person) => {
... movieObj.cast.push(person)
... })
> movieObj

// using aggregation
> db.tours.count({tourPackage:"Cycle California"})

// How many tours are in each tourPackage
> db.tours.aggregate([{$group: {_id:'$tourPackage', count: {$sum:1}}}])

// How many tours each of the organizers has
> db.tours.aggregate([{$group: {_id:'$tourOrganizer.organizerName', count: {$sum:1}}}])
// with the average in the prices of each organizer
> db.tours.aggregate([{$group: {_id:'$tourOrganizer.organizerName', average:{$avg: '$tourPrice'}, count: {$sum:1}}}])
// use the result and insert it into a new category with out as prices
> db.tours.aggregate([{$group: {_id:'$tourOrganizer.organizerName', average:{$avg: '$tourPrice'}, count: {$sum:1}}}, {$out: 'prices'}])
// accessing the previous output
> db.prices.find()
// =================================================
// httpie commands

$ http http://localhost:8080/api/tours

$ http "http://localhost:8080/api/tours?tourPackage=Backpack Cal"

$ http "http://localhost:8080/api/tours/Big Sur Retreat"

$ http "http://localhost:8080/api/tours/Kirsten's Fabulous Tour"

$ http POST http://localhost:8080/api/tours tourName="Kirsten's Fabulous Tour" 
tourPackage="Fun in the sun" tourPrice=10000 tourLength=5

$ http PUT "http://localhost:8080/api/tours/Kirsten's Fabulous Tour" tourBlurb="Get your tan on"


// Replication features
- Full copies of the dataset.
- Primary and secondary servers.
- Automatic failover.

// Sharding features
- Partition data onto multiple servers.
- Server farm friendly.
- Scalability and performance.

